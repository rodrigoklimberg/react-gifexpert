{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAgB5C,OACI,sBAAMC,SARO,SAACC,GAClBA,EAAEC,iBACFN,GAAc,SAAAO,GAAI,OAAKL,GAAL,mBAAoBK,OACtCJ,EAAc,KAKV,SACI,uBACIK,KAAK,OACLC,MAAOP,EACPQ,SAhBI,SAACL,GACjBF,EAAcE,EAAEM,OAAOF,a,+BCRdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAVtB,kBAcZM,GAdY,4CAAH,sDCEPO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAChC,OACI,sBAAKc,UAAU,oCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,kCAAKA,EAAL,WCFCO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAAEA,GAAe,IAAD,EAEdZ,mBAAS,CAC/BmB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAmBxC,OAZAC,qBAAU,WACRxB,EAAQC,GACLwB,MAAM,SAAAC,GACHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAKlB,CAACpB,IAEGqB,EDhB2BK,CAAc1B,GAAlCa,EAFuB,EAE7BN,KAAca,EAFe,EAEfA,QAEtB,OACI,qCACI,+BAAMpB,EAAN,OACCoB,GAAW,mBAAGJ,UAAU,mCAAb,0BACZ,qBAAKA,UAAU,YAAf,SAGYH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEQ1BgB,EAtBM,WAAO,IAAD,EAEWvC,mBAAS,CAAC,cAFrB,mBAElBwC,EAFkB,KAENzC,EAFM,KAIzB,OACI,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BACIyC,EAAWnB,KAAK,SAAAT,GAAQ,OACxB,cAAC,EAAD,CAEEA,SAAUA,GADLA,Y,MCXnB6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.c138b98c.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({setCategories}) => {\n\nconst [inputValue, setInputValue] = useState('');\n\n\nconst handleInput = (e) => {\n    setInputValue(e.target.value);    \n}\n\nconst handleSubmit = (e) => {\n    e.preventDefault();    \n    setCategories(cats => [inputValue, ...cats]);\n    setInputValue('');\n    //console.log(e.target.value);   \n}\n\n    return (    \n        <form onSubmit= { handleSubmit }>\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={ handleInput } \n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired,\n}\n\n\n","\nexport const getGifs = async( category ) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=HatY22nYLjhqN2yGXZo81pnKQKpYBPk4`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n\n    const gifs = data.map( img =>{\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images.downsized_medium.url,\n        }\n    });\n\n    return gifs;\n}","import React from 'react'\n\n\nexport const GifGridItem = ({title, url}) => {\n    return (\n        <div className=\"animate__animated animate__fadeIn\">\n            <img src={url} alt={title} />\n            <p> {title} </p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n    const { data: images, loading } = useFetchGifs( category );   \n\n    return (\n        <>\n            <h3>{ category } </h3> \n           { loading && <p className=\"animate__animated animate__flash\"> Loading... </p>}\n            <div className=\"card-grid\">\n                        \n                    {\n                        images.map( img => (\n                            <GifGridItem \n                                key={img.id}\n                                {...img}/>\n                        ))\n                    }            \n            </div>\n        </>\n    )\n}","import { useEffect, useState } from \"react\"\n\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = ( category ) => {\n    \n    const [state, setstate] = useState({\n        data: [],   \n        loading: true,\n    })\n\n    useEffect(() => {\n      getGifs(category)\n        .then( imgs => {\n            setstate({\n                data: imgs,\n                loading: false,\n            });\n        }\n            \n        );\n    }, [category])\n\n    return state;\n\n}\n","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n  const [categories, setCategories] = useState(['One Punch']);\n\n  return (\n      <>\n        <h2>GifExpertApp</h2>  \n        <AddCategory setCategories={ setCategories }/>\n        <hr/>\n        \n        <ol>\n          { categories.map( category => \n            <GifGrid \n              key={category}\n              category={category}\n            />\n          )}\n        </ol>\n      </>\n  )\n}\n\nexport default GifExpertApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpert from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpert />,\n  document.getElementById('root')\n);"],"sourceRoot":""}